#reviews.py
#Daniel de Waard April 2019 daniel.d.1007@gmail.com
#PURPOSE: to run calls on the Google places API to extract place reviews.

#HOW TO USE:
#1. Install Python on your system.
#2. Make sure your python installation has the requests.
    #http://docs.python-requests.org/en/master/user/install/and math libraries.
#3. Generate a text file of loation names you would like to extract reviews from.
#4. Save your text file of hospital names in the same folder as this Python script. Line 24 is where the input filename is specified. 
#5. Run the python script (python reviews.py)
#6. Once run hospitalreviews.json will contain the output. 
#7. Ctrl + C will exit the script at anytime.

import requests
import json
import urllib3
import os.path

#read the input file to get all hospital names. 
def readFile():
    
    hospitalNames = []
    
    #This file was just generated by copying the column of all victoria hospitals in the excel file into a txt
    fileName = "vic_hospital_names.txt"
    if os.path.isfile(fileName):
        file=open(fileName, "r")
    else: 
        print("file opening error")

    if file.mode == 'r':
        for line in file:
            hospitalNames.append(line)

    print ("\n"+ str(len(hospitalNames))+ " HospitalNames successfully read from file\n")

    return hospitalNames


#SHOULD FIX FOR ANY PRODUCTION VERSION
#supress the "unverified HTTPS request error". 
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

#extract hospital names
hospitalNames = readFile()

output = []

#loop through each hospital name. 
for i in range(0,len(hospitalNames)):
    
    print("Finding place id for "+hospitalNames[i]+'\n')    
    requestString = 'https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input='+hospitalNames[i]+'&inputtype=textquery&fields=place_id&key=AIzaSyDNOnrGBpBxay2KjYp-55OYKAZWw0dWZGU'
    
    #find the place id associated with the hospital name
    response = requests.get(requestString, verify=False)
    
    if response.status_code == 200: 
        print("Place ID found\n")
    else:
        print(response.status_code)
    
    parsed_json = json.loads(response.text)
    
    #deal with the case where no place_id could be found
    if parsed_json['status'] == 'ZERO_RESULTS':
    
        print("No location ID found")
        output.append({"name": ''+hospitalNames[i]+'', "place_id": "not found"})
      
    #if place_id can be found, find the associated reviews. 
    else:
        
        place_id = parsed_json['candidates'][0]['place_id'];
        
        #use the place_id found to extract reviews. 
        requestString = 'https://maps.googleapis.com/maps/api/place/details/json?placeid='+place_id+'&fields=name,review,rating,place_id&key=AIzaSyDNOnrGBpBxay2KjYp-55OYKAZWw0dWZGU'

        print("Pulling reviews for "+hospitalNames[i]+'\n') 
        response = requests.get(requestString, verify=False)

        if response.status_code == 200: 
            print("Reviews found\n")

        else:
            print(response.status_code)

        parsed_json = json.loads(response.text)
        
        #add results to output array
        output.append(parsed_json['result'])
        
#output as a JSON Array.        
with open('hospitalreviews.json', 'w') as outfile:  
    json.dump(output, outfile)